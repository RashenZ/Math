#!/usr/bin/python

from __future__ import print_function
import sys
import math

class unsold(object):

	def display_help(self):
		print("USAGE", end="\n")
		print("		./unsold a b\n", end="\n")
		print("DESCRIPTION", end="\n")
		print("		a 	constant computed from the past results", end="\n")
		print("		b 	constant computed from the past results", end="\n")

	def stock(self, a, b):
		if a.isdigit() == False or b.isdigit() == False:
			self.display_help()
			exit(84)
		self.a = float(a)
		self.b = float(b)
		if self.a < 50 or self.b < 50:
			self.display_help()
			exit(84)
		self.stock = []
		self.xses = []
		self.yses = []
		self.s = 0
		self.c = 0

	def f(self, x, y):
		l = (float(self.a) - float(x)) * (float(self.b) - float(y))
		k = (5 * float(self.a) - 150) * (5 * float(self.b) - 150)
		res = l / k
		self.stock.append(res)
		self.c = self.c + 1
		self.s = self.s + res
		print("\t" + str(format(res, ".3f")), end="")

	def print_first_part(self):
		print("-"*51, end="\n")
		print('\tX=10\tX=20\tX=30\tX=40\tX=50\tY law', end="\n")
		for i in range(10, 51, 10):
			print("Y=" + str(i), end="")
			for x in range(10, 51, 10):
				self.f(x, i)
			print("\t" + str(format(self.s, ".3f")))
			self.yses.append(self.s)
			if self.c is 5:
				self.s = 0
				self.c = 0
		print("X law", end="")
		for i in range(0, 5):
			s = 0.0
			c = i
			for z in range(0, 5):
				s = s + float(self.stock[c])
				c = c + 5
			self.xses.append(s)
			print("\t" + str(format(s, ".3f")), end="")
		print("\t1")

	def print_second_part(self):
		print("-"*51, end="\n")
		print("z\t20\t30\t40\t50\t60\t70\t80\t90\t100\ttotal", end="\n")
		print("p(Z=z)", end="\t")
		twenty = self.stock[0]
		thirty = self.stock[1] + self.stock[5]
		fourty = self.stock[2] + self.stock[6] + self.stock[10]
		fifty = self.stock[3] + self.stock[7] + self.stock[11] + self.stock[15]
		sixty = self.stock[4] + self.stock[8] + self.stock[12] + self.stock[16] + self.stock[20]
		seventy = self.stock[9] + self.stock[13] + self.stock[17] + self.stock[21]
		eighty = self.stock[14] + self.stock[18] + self.stock[22]
		ninety = self.stock[19] + self.stock[23]
		hundred = self.stock[24]
		print(format(twenty, ".3f"), end="\t")
		print(format(thirty, ".3f"), end="\t")
		print(format(fourty, ".3f"), end="\t")
		print(format(fifty, ".3f"), end="\t")
		print(format(sixty, ".3f"), end="\t")
		print(format(seventy, ".3f"), end="\t")
		print(format(eighty, ".3f"), end="\t")
		print(format(ninety, ".3f"), end="\t")
		print(format(hundred, ".3f"), end="\t")
		print(1)

	def print_third_part(self):
		print("-"*51, end="\n")
		sumX = 0.0
		sumY = 0.0
		a = 10

		# Calcuate Sum X
		for i in self.xses:
			sumX = sumX + i * a
			a = a + 10
		a = 10

		# Calculate Sum Y
		for i in self.yses:
			sumY = sumY + i * a
			a = a + 10

		# Calculate Sum Z
		sumZ = sumX + sumY

		# Calculate Var X
		varX = 0.0
		for i in range(0, 5):
			varX = varX + self.xses[i] * pow((i + 1) * 10, 2)
		varX = varX - pow(sumX, 2)

		# Calculate Var Y
		varY = 0.0
		for i in range(0, 5):
			varY = varY + self.yses[i] * pow((i + 1) * 10, 2)
		varY = varY - pow(sumY, 2)

		# Calculate Var Z
		varZ = varX + varY
		print("expected value of X: " + str(format(sumX, ".1f")), end="\n")
		print("variance of X: " + str(format(varX, ".1f")), end="\n")
		print("expected value of Y: " + str(format(sumY, ".1f")), end="\n")
		print("variance of Y: " + str(format(varY, ".1f")), end="\n")
		print("expected value of Z: " + str(format(sumZ, ".1f")), end="\n")
		print("variance of Z: " + str(format(varZ, ".1f")) , end="\n")
		print("-"*51, end="\n")

if __name__ == '__main__':
	unsold = unsold()
	if len(sys.argv) is 2 and sys.argv[1] is "-h":
		unsold.display_help()
		exit(0)
	if len(sys.argv) is not 3:
		unsold.display_help()
		exit(84)
	unsold.stock(sys.argv[1], sys.argv[2])
	unsold.print_first_part()
	unsold.print_second_part()
	unsold.print_third_part()
